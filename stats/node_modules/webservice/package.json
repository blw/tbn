{
  "name": "webservice",
  "description": "turns modules into RESTFul web-services",
  "version": "0.5.1",
  "author": {
    "name": "Marak Squires",
    "email": "marak.squires@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/marak/webservice.js.git"
  },
  "keywords": [
    "webservice",
    "REST",
    "web-service",
    "JSON"
  ],
  "main": "./lib/webservice",
  "dependencies": {
    "journey": "= 0.4.0-pre",
    "colors": ">= 0.5.0"
  },
  "devDependencies": {
    "vows": "0.5.x",
    "request": "1.9.x"
  },
  "scripts": {
    "test": "vows",
    "start": "server.js"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "# webservice.js - turn node.js modules into web-services\n#### v0.5.0\nwebservice.js is a somewhat opinionated node.js library that allows developers to easily create RESTFul web-services based on the exports of node.js modules. Having to deal with both implementing and consuming 100s of web-services over the past ten years, I've grown bitter of web-services with arbitrary restrictions, poor documentation, and piles of boiler-plate code. webservice.js tries to solve these problems by implementing RESTFul principals in a much more relaxed fashion.\n\nwebservice.js also plays very nice with node's httpServer and other middleware frameworks ( such as Connect ).\n\n\n## WEBSERVICE FEATURES\n\n- Instantly create a RESTful web-service from a node.js module\n- Built-in JSON-schema validation for incoming data provided via Resourcer\n- Data can be posted to any webservice.js end-point as JSON, query string, or form data.\n- By default, HTTP Verbs and Content-Type are not strictly enforced\n- Built-in JSONP support\n\n## INTEGRATION FEATURES\n\n- Regular node.js modules are automatically transformed into API methods for your web-service\n- Can export as an httpServer request handler\n- Can export as an httpServer instance\n- Works as a middleware in Connect or stack\n- Can expose .coffee files as web-services\n- Auto-documentation of all your web-services\n\nRegular JavaScript methods are automatically transformed into API methods for your web-service. Data can be posted to any webservice.js end-point as JSON, query string, or form data. By default, HTTP Verbs, Content-Type, and  are not strictly enforced. Content-type\n\n## installation\n\n### installing npm (node package manager)\n<pre>\n  curl http://npmjs.org/install.sh | sh\n</pre>\n\n### installing webservice.js\n<pre>\n  npm install webservice\n</pre>\n\n## Setting up a webservice\n\n### As a standalone webservice server\n\n    var webservice = require('../lib/webservice'),\n        demoModule = require('./modules/demoModule'),\n        colors     = require('colors');\n\n    webservice.createServer(demoModule).listen(8080);\n\n    console.log(' > stand-alone json webservice started on port 8080'.cyan);  \n\n\n### As a handler for http.Server\n\n    var http       = require('http'),\n        ws         = require('../../lib/webservice'),\n        demoModule = require('../sample_modules/demoModule'),\n        colors     = require('colors'),\n        handler    = ws.createHandler(demoModule);\n\n    http.createServer(handler).listen(8080);\n\n    console.log(' > json webservice started on port 8080'.cyan);  \n\n\n\n### Using Connect\n\n    var connect    = require('connect'),\n        server     = connect.createServer(),\n        webservice = require('../../lib/webservice'),\n        demoModule = require('../sample_modules/demoModule'),\n        colors     = require('colors');\n\n\n    server.use(connect.logger());\n\n    server.use(webservice.createHandler(demoModule));\n\n    server.listen(3000);\n\n    console.log('Connect server running on port 3000 with webservice.js'.cyan);\n\n### Using stack\n\n    var http   = require('http'),\n        colors = require('colors');\n\n    http.createServer(require('stack')(\n      require('./webservice.stack')()\n    )).listen(8080);\n\n    console.log(' > Stack server with webservice.js middleware started on port 8080'.cyan);\n\n### Using Coffeescript\n\nUsing Coffeescript with webservice.js is very simple. There are no changes that need to be made for Coffeescript to work, just follow the example @ [https://github.com/Marak/webservice.js/blob/master/examples/Coffeescript/server.coffee](https://github.com/Marak/webservice.js/blob/master/examples/Coffeescript/server.coffee)\n\n### demoModule.js\n\n    this.title = \"Welcome to your webservice!\";\n    this.name = \"demo api module\";\n    this.version = \"0.1.0\";\n    this.endpoint = \"http://localhost:8080\";\n\n    exports.echo = function(options, callback){\n      callback(null, options.msg);\n    };\n    exports.echo.description = \"this is the echo method, it echos back your msg\";\n    exports.echo.schema = {\n      msg: { \n        type: 'string',\n        optional: false \n      }\n    };\n\n    exports.ping = function(options, callback){\n      setTimeout(function(){\n        callback(null, 'pong');\n      }, 2000);\n    }\n    exports.ping.description = \"this is the ping method, it pongs back after a 2 second delay\";\n\n\n## Usage\n\nOnce you have started up your web-service, visit http://localhost:8080/docs\n\n\n<img src=\"https://github.com/Marak/webservice.js/raw/master/tests/wsscreenshot.png\"/>\n\n## tests\n\ntests are good. npm install vows, then run:\n\n     vows test/*\n\n\n## author\n\nMarak Squires ",
  "readmeFilename": "ReadMe.md",
  "bugs": {
    "url": "https://github.com/marak/webservice.js/issues"
  },
  "_id": "webservice@0.5.1",
  "dist": {
    "shasum": "1f4e9f205dc4b0613d1f06f0ca56d6bc71a9bb9b"
  },
  "_from": "webservice@",
  "_resolved": "https://registry.npmjs.org/webservice/-/webservice-0.5.1.tgz"
}
